# for c project
# Prerequisites
# *.d

# Object files
*.o
# *.ko
# *.obj
# *.elf

# Linker output
# *.ilk
# *.map
# *.exp

# Precompiled Headers
# *.gch
# *.pch

# Libraries
# *.lib
# *.a
# *.la
# *.lo

# Shared objects (inc. Windows DLLs)
# *.dll
# *.so
# *.so.*
# *.dylib

# Executables
# *.exe
# *.out
# *.app
# *.i*86
# *.x86_64
# *.hex

# Debug files
# *.dSYM/
# *.su
# *.idb
# *.pdb

# Kernel Module Compile Results
# *.mod*
# *.cmd
# .tmp_versions/
# modules.order
# Module.symvers
# Mkfile.old
# dkms.conf

# for rust project
# Generated by Cargo
# will have compiled files and executables
# debug/
# target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# Cargo.lock

# These are backup files generated by rustfmt
# **/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
# *.pdb

# for vscode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# Copy from Curl Git Repository 7.79.1
*.asc
*.dll
*.exe
*.exp
*.la
*.lib
*.lo
*.o
*.obj
*.pdb
*.pyc
*~
.*.sw?
.cproject
.deps
.dirstamp
.libs
.project
.settings
/.vs
/build/
/builds/
/stats/
__pycache__
CHANGES.dist
Debug
INSTALL
Makefile
Makefile.in
Release
TAGS
aclocal.m4
aclocal.m4.bak
autom4te.cache
compile
config.cache
config.guess
config.log
config.status
config.sub
configure
curl-*.tar.bz2
curl-*.tar.gz
curl-*.tar.xz
curl-*.zip
curl-config
depcomp
install-sh
libcurl.pc
libtool
ltmain.sh
missing
mkinstalldirs
tags
test-driver
scripts/_curl
scripts/curl.fish
curl_fuzzer
curl_fuzzer_seed_corpus.zip
libstandaloneengine.a